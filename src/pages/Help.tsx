import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  HelpCircle, 
  Book, 
  Video, 
  MessageCircle, 
  Search,
  ChevronDown,
  ChevronRight,
  ExternalLink,
  Download,
  Play
} from 'lucide-react';
import Sidebar from '../components/Sidebar';
import AnimatedBackground from '../components/AnimatedBackground';

interface FAQItem {
  question: string;
  answer: string;
  category: string;
}

interface GuideSection {
  title: string;
  content: string;
  steps?: string[];
}

export default function Help() {
  const [searchTerm, setSearchTerm] = useState('');
  const [activeCategory, setActiveCategory] = useState('getting-started');
  const [expandedFAQ, setExpandedFAQ] = useState<number | null>(null);

  const categories = [
    { id: 'getting-started', label: 'Getting Started', icon: Play },
    { id: 'data-upload', label: 'Data Upload', icon: Download },
    { id: 'sensor-creation', label: 'Sensor Creation', icon: HelpCircle },
    { id: 'deployment', label: 'Deployment', icon: ExternalLink },
    { id: 'api', label: 'API Reference', icon: Book },
    { id: 'troubleshooting', label: 'Troubleshooting', icon: MessageCircle },
  ];

  const faqs: FAQItem[] = [
    {
      question: "How do I get started with ChainSensor?",
      answer: "To get started, first create an account and log in. Then upload your dataset in the 'My Data' section, create a sensor using our visual builder or AI auto-generation, and deploy it to your preferred platform.",
      category: "getting-started"
    },
    {
      question: "What file formats are supported for data upload?",
      answer: "ChainSensor supports CSV, JSON, XLSX, TXT, WAV, MP4, and MP3 files. The platform automatically detects the format and suggests appropriate sensor types based on your data.",
      category: "data-upload"
    },
    {
      question: "How does the AI auto-build feature work?",
      answer: "The AI analyzes your dataset's structure, data types, and patterns to automatically generate intelligent sensor logic. It creates appropriate triggers, conditions, and actions based on the nature of your data.",
      category: "sensor-creation"
    },
    {
      question: "Can I edit the AI-generated sensor logic?",
      answer: "Yes! All logic blocks generated by AI can be edited, removed, or extended. You can click the edit button on any logic block to modify its conditions or actions.",
      category: "sensor-creation"
    },
    {
      question: "What deployment platforms are supported?",
      answer: "ChainSensor supports deployment to AWS Lambda, Vercel Edge Functions, and Railway. Each platform offers different features like auto-scaling, global CDN, and monitoring capabilities.",
      category: "deployment"
    },
    {
      question: "How do I access my deployed sensor's API?",
      answer: "After successful deployment, you'll receive an API endpoint URL. You can view, copy, or test this endpoint directly from the deployment dashboard. All APIs use HTTPS and include authentication.",
      category: "deployment"
    },
    {
      question: "What's the difference between visual and code modes?",
      answer: "Visual mode uses drag-and-drop logic blocks for easy sensor creation without coding. Code mode allows you to write custom JavaScript logic for advanced use cases. You can switch between modes at any time.",
      category: "sensor-creation"
    },
    {
      question: "How much storage do I get?",
      answer: "New users get 10GB of free storage. Storage usage is calculated based on uploaded dataset sizes. You can monitor your usage in the 'My Data' section.",
      category: "data-upload"
    },
    {
      question: "Can I download datasets from the marketplace?",
      answer: "Yes! The Data Marketplace contains 20+ curated datasets. You can preview, download, and use these datasets to create sensors. Some datasets may require attribution to the original authors.",
      category: "data-upload"
    },
    {
      question: "My sensor deployment failed. What should I do?",
      answer: "Check that your sensor has valid logic blocks and a selected dataset. Ensure your internet connection is stable. If the issue persists, try deploying to a different platform or contact support.",
      category: "troubleshooting"
    }
  ];

  const guides: Record<string, GuideSection[]> = {
    'getting-started': [
      {
        title: "Welcome to ChainSensor",
        content: "ChainSensor transforms your data into intelligent sensors using AI. Whether you have environmental data, biometric readings, or any other dataset, our platform helps you create responsive, automated sensors.",
        steps: [
          "Create an account and log in",
          "Upload your first dataset",
          "Create a sensor using our tools",
          "Deploy and start monitoring"
        ]
      },
      {
        title: "Platform Overview",
        content: "The ChainSensor platform consists of several key sections:",
        steps: [
          "Dashboard: Overview of your sensors and activity",
          "My Data: Upload and manage datasets",
          "Create Sensor: Build intelligent sensor logic",
          "Deploy Sensor: Launch your sensors to the cloud",
          "Data Marketplace: Discover and download datasets"
        ]
      }
    ],
    'data-upload': [
      {
        title: "Uploading Your Data",
        content: "ChainSensor accepts various data formats and automatically processes them for sensor creation.",
        steps: [
          "Navigate to 'My Data' section",
          "Drag and drop files or click 'Browse Files'",
          "Select appropriate data type (optional)",
          "Wait for processing to complete",
          "View your uploaded datasets in the table"
        ]
      },
      {
        title: "Data Types and Formats",
        content: "Different data types enable different sensor capabilities:",
        steps: [
          "Health: Heart rate, blood pressure, medical data",
          "Environment: Temperature, humidity, air quality",
          "Movement: Accelerometer, GPS, motion data",
          "Audio: Voice commands, sound analysis",
          "Custom: Any structured data format"
        ]
      }
    ],
    'sensor-creation': [
      {
        title: "Visual Sensor Builder",
        content: "Create sensors using our intuitive drag-and-drop interface.",
        steps: [
          "Select a dataset from your uploaded files",
          "Choose 'Visual' build mode",
          "Add logic blocks: Triggers, Conditions, Actions",
          "Edit block content by clicking the edit button",
          "Test your sensor logic",
          "Save your sensor"
        ]
      },
      {
        title: "AI Auto-Build",
        content: "Let our AI analyze your data and generate smart sensor logic automatically.",
        steps: [
          "Select a dataset",
          "Choose 'AI Auto' build mode",
          "Click 'Generate Smart Logic'",
          "Review and edit the generated logic",
          "Test and save your sensor"
        ]
      },
      {
        title: "Code Mode",
        content: "Write custom JavaScript logic for advanced sensor behavior.",
        steps: [
          "Select 'Code' build mode",
          "Write your custom sensor logic",
          "Use the provided template as a starting point",
          "Test your code with 'Run Test'",
          "Save your sensor"
        ]
      }
    ],
    'deployment': [
      {
        title: "Deploying Your Sensor",
        content: "Deploy your sensors to cloud platforms for global accessibility.",
        steps: [
          "Go to 'Deploy Sensor' section",
          "Select a sensor from your created sensors",
          "Choose a deployment platform (AWS, Vercel, Railway)",
          "Configure deployment settings",
          "Click 'Deploy Sensor'",
          "Wait for deployment to complete"
        ]
      },
      {
        title: "API Endpoints",
        content: "Access your deployed sensors through REST API endpoints.",
        steps: [
          "Copy the provided API endpoint URL",
          "Use HTTP requests to interact with your sensor",
          "Include authentication headers if required",
          "Monitor API usage in the dashboard"
        ]
      }
    ],
    'api': [
      {
        title: "API Authentication",
        content: "Secure your sensor APIs with authentication keys.",
        steps: [
          "Generate API keys in Settings > API Keys",
          "Include the key in request headers",
          "Use format: Authorization: Bearer YOUR_API_KEY",
          "Rotate keys regularly for security"
        ]
      },
      {
        title: "Making API Calls",
        content: "Example API usage for your deployed sensors:",
        steps: [
          "GET /api/sensor/{id} - Get sensor status",
          "POST /api/sensor/{id}/data - Send data to sensor",
          "GET /api/sensor/{id}/logs - View sensor logs",
          "PUT /api/sensor/{id}/config - Update configuration"
        ]
      }
    ],
    'troubleshooting': [
      {
        title: "Common Issues",
        content: "Solutions to frequently encountered problems:",
        steps: [
          "Upload fails: Check file format and size limits",
          "Sensor creation errors: Ensure dataset is processed",
          "Deployment issues: Verify platform credentials",
          "API errors: Check authentication and endpoints"
        ]
      },
      {
        title: "Getting Support",
        content: "If you need additional help:",
        steps: [
          "Check this documentation first",
          "Search our FAQ section",
          "Contact support through the platform",
          "Join our community forum"
        ]
      }
    ]
  };

  const filteredFAQs = faqs.filter(faq => 
    faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
    faq.answer.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const currentGuides = guides[activeCategory] || [];

  return (
    <div className="min-h-screen bg-black text-white">
      <AnimatedBackground />
      <Sidebar />
      
      <div className="ml-64 p-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          {/* Header */}
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-white mb-2">Help & Documentation</h1>
            <p className="text-gray-400">Learn how to use ChainSensor to build intelligent sensors from your data</p>
          </div>

          {/* Search */}
          <div className="mb-8">
            <div className="relative max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search documentation..."
                className="w-full pl-10 pr-4 py-3 bg-gray-800/50 border border-gray-600 rounded-lg focus:border-yellow-400 focus:ring-1 focus:ring-yellow-400 text-white placeholder-gray-400"
              />
            </div>
          </div>

          <div className="grid lg:grid-cols-4 gap-8">
            {/* Categories Sidebar */}
            <div className="lg:col-span-1">
              <div className="bg-gray-900/50 backdrop-blur-md rounded-xl border border-yellow-400/20 p-4">
                <h3 className="text-lg font-semibold text-white mb-4">Categories</h3>
                <nav className="space-y-2">
                  {categories.map((category) => (
                    <motion.button
                      key={category.id}
                      whileHover={{ scale: 1.02 }}
                      onClick={() => setActiveCategory(category.id)}
                      className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-all ${
                        activeCategory === category.id
                          ? 'bg-yellow-400/20 text-yellow-400 border border-yellow-400/30'
                          : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
                      }`}
                    >
                      <category.icon className="h-5 w-5" />
                      <span className="font-medium text-sm">{category.label}</span>
                    </motion.button>
                  ))}
                </nav>
              </div>
            </div>

            {/* Content Area */}
            <div className="lg:col-span-3 space-y-8">
              {/* Guides */}
              <div className="bg-gray-900/50 backdrop-blur-md rounded-xl border border-yellow-400/20 p-8">
                <h2 className="text-2xl font-bold text-white mb-6 flex items-center">
                  <Book className="h-6 w-6 text-yellow-400 mr-2" />
                  Documentation
                </h2>
                
                <div className="space-y-8">
                  {currentGuides.map((guide, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: index * 0.1 }}
                      className="border-b border-gray-700 last:border-b-0 pb-6 last:pb-0"
                    >
                      <h3 className="text-xl font-semibold text-white mb-4">{guide.title}</h3>
                      <p className="text-gray-300 mb-4">{guide.content}</p>
                      
                      {guide.steps && (
                        <div className="space-y-2">
                          {guide.steps.map((step, stepIndex) => (
                            <div key={stepIndex} className="flex items-start space-x-3">
                              <div className="flex-shrink-0 w-6 h-6 bg-yellow-400/20 text-yellow-400 rounded-full flex items-center justify-center text-sm font-medium mt-0.5">
                                {stepIndex + 1}
                              </div>
                              <p className="text-gray-300">{step}</p>
                            </div>
                          ))}
                        </div>
                      )}
                    </motion.div>
                  ))}
                </div>
              </div>

              {/* FAQ Section */}
              <div className="bg-gray-900/50 backdrop-blur-md rounded-xl border border-yellow-400/20 p-8">
                <h2 className="text-2xl font-bold text-white mb-6 flex items-center">
                  <HelpCircle className="h-6 w-6 text-yellow-400 mr-2" />
                  Frequently Asked Questions
                </h2>
                
                <div className="space-y-4">
                  {(searchTerm ? filteredFAQs : faqs.filter(faq => faq.category === activeCategory)).map((faq, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: index * 0.1 }}
                      className="border border-gray-700 rounded-lg overflow-hidden"
                    >
                      <button
                        onClick={() => setExpandedFAQ(expandedFAQ === index ? null : index)}
                        className="w-full flex items-center justify-between p-4 text-left hover:bg-gray-800/30 transition-colors"
                      >
                        <span className="text-white font-medium">{faq.question}</span>
                        {expandedFAQ === index ? (
                          <ChevronDown className="h-5 w-5 text-gray-400" />
                        ) : (
                          <ChevronRight className="h-5 w-5 text-gray-400" />
                        )}
                      </button>
                      
                      {expandedFAQ === index && (
                        <motion.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          className="px-4 pb-4"
                        >
                          <p className="text-gray-300">{faq.answer}</p>
                        </motion.div>
                      )}
                    </motion.div>
                  ))}
                </div>
              </div>

              {/* Quick Links */}
              <div className="bg-gray-900/50 backdrop-blur-md rounded-xl border border-yellow-400/20 p-8">
                <h2 className="text-2xl font-bold text-white mb-6">Quick Links</h2>
                
                <div className="grid md:grid-cols-2 gap-4">
                  <motion.a
                    whileHover={{ scale: 1.02 }}
                    href="#"
                    className="flex items-center space-x-3 p-4 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors"
                  >
                    <Video className="h-6 w-6 text-yellow-400" />
                    <div>
                      <h3 className="text-white font-medium">Video Tutorials</h3>
                      <p className="text-gray-400 text-sm">Watch step-by-step guides</p>
                    </div>
                  </motion.a>
                  
                  <motion.a
                    whileHover={{ scale: 1.02 }}
                    href="#"
                    className="flex items-center space-x-3 p-4 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors"
                  >
                    <MessageCircle className="h-6 w-6 text-yellow-400" />
                    <div>
                      <h3 className="text-white font-medium">Community Forum</h3>
                      <p className="text-gray-400 text-sm">Get help from other users</p>
                    </div>
                  </motion.a>
                  
                  <motion.a
                    whileHover={{ scale: 1.02 }}
                    href="#"
                    className="flex items-center space-x-3 p-4 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors"
                  >
                    <ExternalLink className="h-6 w-6 text-yellow-400" />
                    <div>
                      <h3 className="text-white font-medium">API Documentation</h3>
                      <p className="text-gray-400 text-sm">Technical API reference</p>
                    </div>
                  </motion.a>
                  
                  <motion.a
                    whileHover={{ scale: 1.02 }}
                    href="#"
                    className="flex items-center space-x-3 p-4 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors"
                  >
                    <Download className="h-6 w-6 text-yellow-400" />
                    <div>
                      <h3 className="text-white font-medium">Sample Datasets</h3>
                      <p className="text-gray-400 text-sm">Download example data</p>
                    </div>
                  </motion.a>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  );
}